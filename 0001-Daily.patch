From 7c94f14cf3fd1e96989d8b7782993abbf1e860d6 Mon Sep 17 00:00:00 2001
From: shawn <shawn@ubuntu.(none)>
Date: Thu, 29 Nov 2012 15:55:02 -0500
Subject: [PATCH] Daily

---
 .gitignore                            |    3 +-
 application/config/autoload.php       |    2 +-
 application/controllers/auth.php      |  745 ++++++++++++---------------------
 application/controllers/example.php   |   12 -
 application/controllers/welcome.php   |   38 +-
 application/helpers/couch_helper.php  |   28 +-
 application/libraries/Tank_auth.php   |   11 +-
 application/libraries/characters.php  |   29 +-
 application/views/character_form.php~ |   11 -
 application/views/includes/foot.php   |    2 +-
 application/views/includes/index.php  |    4 +
 application/views/nav.php             |   21 +-
 application/views/welcome.php         |    2 +-
 assets/css/test.css                   |   42 +-
 captcha/1348015176.6255.jpg           |  Bin 4332 -> 0 bytes
 15 files changed, 352 insertions(+), 598 deletions(-)
 mode change 100755 => 100644 .gitignore
 delete mode 100755 application/controllers/example.php
 delete mode 100755 application/views/character_form.php~
 delete mode 100644 captcha/1348015176.6255.jpg

diff --git a/.gitignore b/.gitignore
old mode 100755
new mode 100644
index 14bc68c..db04dda
--- a/.gitignore
+++ b/.gitignore
@@ -1 +1,2 @@
-/nbproject/private/
\ No newline at end of file
+/nbproject/private/
+/.metadata/
\ No newline at end of file
diff --git a/application/config/autoload.php b/application/config/autoload.php
index 4842987..7fd6eb3 100755
--- a/application/config/autoload.php
+++ b/application/config/autoload.php
@@ -52,7 +52,7 @@ $autoload['packages'] = array(APPPATH.'third_party');
 |	$autoload['libraries'] = array('database', 'session', 'xmlrpc');
 */
 
-$autoload['libraries'] = array('database','firephp','session','tank_auth','couchdb');
+$autoload['libraries'] = array('database','firephp','session','bitauth','couchdb');
 
 
 /*
diff --git a/application/controllers/auth.php b/application/controllers/auth.php
index 2de6e36..667dedc 100755
--- a/application/controllers/auth.php
+++ b/application/controllers/auth.php
@@ -5,595 +5,368 @@ class Auth extends CI_Controller
 	function __construct()
 	{
 		parent::__construct();
-
-		$this->load->helper(array('form', 'url'));
+		$this->load->library('bitauth');
+		$this->load->helper('form');
+		$this->load->helper('url');
 		$this->load->library('form_validation');
-		$this->load->library('security');
-		$this->load->library('tank_auth');
-		$this->lang->load('tank_auth');
+		$this->form_validation->set_error_delimiters('<div class="error">', '</div>');
 		$this->assets['css'][]='vader/jquery-ui-1.8.5.custom.css';
 		$this->assets['css'][]='test.css';
 		$this->assets['js'][]='jquery.js';
 		$this->assets['js'][]='jquery-ui-1.8.5.custom.min.js';
 	}
 
-	function index()
-	{
-		if ($message = $this->session->flashdata('message')) {
-			$this->load->view('auth/general_message', array('message' => $message));
-		} else {
-			redirect('/auth/login/');
-		}
-	}
-
 	/**
-	 * Login user on the site
+	 * Example::convert()
 	 *
-	 * @return void
 	 */
-	function login()
+	public function convert()
 	{
-		if ($this->tank_auth->is_logged_in()) {									// logged in
-			redirect('');
-
-		} elseif ($this->tank_auth->is_logged_in(FALSE)) {						// logged in, not activated
-			redirect('/auth/send_again/');
-
-		} else {
-			$data['login_by_username'] = ($this->config->item('login_by_username', 'tank_auth') AND
-					$this->config->item('use_username', 'tank_auth'));
-			$data['login_by_email'] = $this->config->item('login_by_email', 'tank_auth');
-
-			$this->form_validation->set_rules('login', 'Login', 'trim|required|xss_clean');
-			$this->form_validation->set_rules('password', 'Password', 'trim|required|xss_clean');
-			$this->form_validation->set_rules('remember', 'Remember me', 'integer');
-
-			// Get login for counting attempts to login
-			if ($this->config->item('login_count_attempts', 'tank_auth') AND
-					($login = $this->input->post('login'))) {
-				$login = $this->security->xss_clean($login);
-			} else {
-				$login = '';
-			}
+		$this->load->dbforge();
+		$this->dbforge->modify_column($this->bitauth->_table['groups'], array(
+			'roles' => array(
+				'name' => 'roles',
+				'type' => 'text'
+			)
+		));
 
-			$data['use_recaptcha'] = $this->config->item('use_recaptcha', 'tank_auth');
-			if ($this->tank_auth->is_max_login_attempts_exceeded($login)) {
-				if ($data['use_recaptcha'])
-					$this->form_validation->set_rules('recaptcha_response_field', 'Confirmation Code', 'trim|xss_clean|required|callback__check_recaptcha');
-				else
-					$this->form_validation->set_rules('captcha', 'Confirmation Code', 'trim|xss_clean|required|callback__check_captcha');
-			}
-			$data['errors'] = array();
-
-			if ($this->form_validation->run()) {								// validation ok
-				if ($this->tank_auth->login(
-						$this->form_validation->set_value('login'),
-						$this->form_validation->set_value('password'),
-						$this->form_validation->set_value('remember'),
-						$data['login_by_username'],
-						$data['login_by_email'])) {								// success
-					redirect('');
-
-				} else {
-					$errors = $this->tank_auth->get_error_message();
-					if (isset($errors['banned'])) {								// banned user
-						$this->_show_message($this->lang->line('auth_message_banned').' '.$errors['banned']);
-
-					} elseif (isset($errors['not_activated'])) {				// not activated user
-						redirect('/auth/send_again/');
-
-					} else {													// fail
-						foreach ($errors as $k => $v)	$data['errors'][$k] = $this->lang->line($v);
-					}
-				}
+		$query = $this->db->select('group_id, roles')->get($this->bitauth->_table['groups']);
+		if($query && $query->num_rows())
+		{
+			foreach($query->result() as $row)
+			{
+				$this->db->where('group_id', $row->group_id)->set('roles', $this->bitauth->convert($row->roles))->update($this->bitauth->_table['groups']);
 			}
-			$data['show_captcha'] = FALSE;
-			if ($this->tank_auth->is_max_login_attempts_exceeded($login)) {
-				$data['show_captcha'] = TRUE;
-				if ($data['use_recaptcha']) {
-					$data['recaptcha_html'] = $this->_create_recaptcha();
-				} else {
-					$data['captcha_html'] = $this->_create_captcha();
-				}
-			}
-			$data['content']=$this->load->view('auth/login_form',$data,true);
-			$data['head'] = $this->assets;
-			$this->load->view('includes/index', $data);
 		}
-	}
-
-	/**
-	 * Logout user
-	 *
-	 * @return void
-	 */
-	function logout()
-	{
-		$this->tank_auth->logout();
 
-		$this->_show_message($this->lang->line('auth_message_logged_out'));
+		echo 'Update complete.';
 	}
 
 	/**
-	 * Register user on the site
+	 * Example::login()
 	 *
-	 * @return void
 	 */
-	function register()
+	public function login()
 	{
-		if ($this->tank_auth->is_logged_in()) {									// logged in
-			redirect('');
-
-		} elseif ($this->tank_auth->is_logged_in(FALSE)) {						// logged in, not activated
-			redirect('/auth/send_again/');
-
-		} elseif (!$this->config->item('allow_registration', 'tank_auth')) {	// registration is off
-			$this->_show_message($this->lang->line('auth_message_registration_disabled'));
-
-		} else {
-			$use_username = $this->config->item('use_username', 'tank_auth');
-			if ($use_username) {
-				$this->form_validation->set_rules('username', 'Username', 'trim|required|xss_clean|min_length['.$this->config->item('username_min_length', 'tank_auth').']|max_length['.$this->config->item('username_max_length', 'tank_auth').']|alpha_dash');
-			}
-			$this->form_validation->set_rules('email', 'Email', 'trim|required|xss_clean|valid_email');
-			$this->form_validation->set_rules('password', 'Password', 'trim|required|xss_clean|min_length['.$this->config->item('password_min_length', 'tank_auth').']|max_length['.$this->config->item('password_max_length', 'tank_auth').']|alpha_dash');
-			$this->form_validation->set_rules('confirm_password', 'Confirm Password', 'trim|required|xss_clean|matches[password]');
-
-			$captcha_registration	= $this->config->item('captcha_registration', 'tank_auth');
-			$use_recaptcha			= $this->config->item('use_recaptcha', 'tank_auth');
-			if ($captcha_registration) {
-				if ($use_recaptcha) {
-					$this->form_validation->set_rules('recaptcha_response_field', 'Confirmation Code', 'trim|xss_clean|required|callback__check_recaptcha');
-				} else {
-					$this->form_validation->set_rules('captcha', 'Confirmation Code', 'trim|xss_clean|required|callback__check_captcha');
-				}
-			}
-			$data['errors'] = array();
-
-			$email_activation = $this->config->item('email_activation', 'tank_auth');
-
-			if ($this->form_validation->run()) {								// validation ok
-				if (!is_null($data = $this->tank_auth->create_user(
-						$use_username ? $this->form_validation->set_value('username') : '',
-						$this->form_validation->set_value('email'),
-						$this->form_validation->set_value('password'),
-						$email_activation))) {									// success
-
-					$data['site_name'] = $this->config->item('website_name', 'tank_auth');
-
-					if ($email_activation) {									// send "activate" email
-						$data['activation_period'] = $this->config->item('email_activation_expire', 'tank_auth') / 3600;
-
-						$this->_send_email('activate', $data['email'], $data);
-
-						unset($data['password']); // Clear password (just for any case)
-
-						$this->_show_message($this->lang->line('auth_message_registration_completed_1'));
-
-					} else {
-						if ($this->config->item('email_account_details', 'tank_auth')) {	// send "welcome" email
-
-							$this->_send_email('welcome', $data['email'], $data);
-						}
-						unset($data['password']); // Clear password (just for any case)
-
-						$this->_show_message($this->lang->line('auth_message_registration_completed_2').' '.anchor('/auth/login/', 'Login'));
+		$data = array();
+
+		if($this->input->post())
+		{
+			$this->form_validation->set_rules('username', 'Username', 'trim|required');
+			$this->form_validation->set_rules('password', 'Password', 'required');
+			$this->form_validation->set_rules('remember_me','Remember Me','');
+
+			if($this->form_validation->run() == TRUE)
+			{
+				// Login
+				if($this->bitauth->login($this->input->post('username'), $this->input->post('password'), $this->input->post('remember_me')))
+				{
+					// Redirect
+					if($redir = $this->session->userdata('redir'))
+					{
+						$this->session->unset_userdata('redir');
 					}
-				} else {
-					$errors = $this->tank_auth->get_error_message();
-					foreach ($errors as $k => $v)	$data['errors'][$k] = $this->lang->line($v);
+
+					redirect($redir ? $redir : 'welcome');
 				}
-			}
-			if ($captcha_registration) {
-				if ($use_recaptcha) {
-					$data['recaptcha_html'] = $this->_create_recaptcha();
-				} else {
-					$data['captcha_html'] = $this->_create_captcha();
+				else
+				{
+					$data['error'] = $this->bitauth->get_error();
 				}
 			}
-			$data['use_username'] = $use_username;
-			$data['captcha_registration'] = $captcha_registration;
-			$data['use_recaptcha'] = $use_recaptcha;
-			if($this->input->is_ajax_request()){
-				$this->load->view('auth/register_form', $data);
-			}else{
-				$data['content']=$this->load->view('auth/login_form',$data,true);
-				$data['head'] = $this->assets;
-				$this->load->view('includes/index', $data);
-				$this->load->view('auth/register_form', $data);
-				
+			else
+			{
+				$data['error'] = validation_errors();
 			}
-			
 		}
+		$data['head'] = $this->assets;
+		$data['content'] = $this->load->view('example/login', $data,true);
+		$this->load->view('includes/index', $data);
 	}
 
 	/**
-	 * Send activation email again, to the same or new email address
+	 * Example::index()
 	 *
-	 * @return void
 	 */
-	function send_again()
+	public function index()
 	{
-		if (!$this->tank_auth->is_logged_in(FALSE)) {							// not logged in or activated
-			redirect('/auth/login/');
-
-		} else {
-			$this->form_validation->set_rules('email', 'Email', 'trim|required|xss_clean|valid_email');
-
-			$data['errors'] = array();
-
-			if ($this->form_validation->run()) {								// validation ok
-				if (!is_null($data = $this->tank_auth->change_email(
-						$this->form_validation->set_value('email')))) {			// success
-
-					$data['site_name']	= $this->config->item('website_name', 'tank_auth');
-					$data['activation_period'] = $this->config->item('email_activation_expire', 'tank_auth') / 3600;
-
-					$this->_send_email('activate', $data['email'], $data);
-
-					$this->_show_message(sprintf($this->lang->line('auth_message_activation_email_sent'), $data['email']));
-
-				} else {
-					$errors = $this->tank_auth->get_error_message();
-					foreach ($errors as $k => $v)	$data['errors'][$k] = $this->lang->line($v);
-				}
-			}
-			$this->load->view('auth/send_again_form', $data);
+		if( ! $this->bitauth->logged_in())
+		{
+			$this->session->set_userdata('redir', current_url());
+			redirect('auth/login');
 		}
+		$authData = array('bitauth' => $this->bitauth, 'users' => $this->bitauth->get_users());
+		$data['head'] = $this->assets;
+		$data['content'] = $this->load->view('example/users', $authData,true);
+		$this->load->view('includes/index', $data);
 	}
 
 	/**
-	 * Activate user account.
-	 * User is verified by user_id and authentication code in the URL.
-	 * Can be called by clicking on link in mail.
-	 *
-	 * @return void
-	 */
-	function activate()
+	* Example::register()
+	*
+	*/
+	public function register()
 	{
-		$user_id		= $this->uri->segment(3);
-		$new_email_key	= $this->uri->segment(4);
-
-		// Activate user
-		if ($this->tank_auth->activate_user($user_id, $new_email_key)) {		// success
-			$this->tank_auth->logout();
-			$this->_show_message($this->lang->line('auth_message_activation_completed').' '.anchor('/auth/login/', 'Login'));
+		if($this->input->post())
+		{
+			$this->form_validation->set_rules('username', 'Username', 'trim|required|bitauth_unique_username');
+			$this->form_validation->set_rules('fullname', 'Fullname', '');
+			$this->form_validation->set_rules('email', 'Email', 'trim|required|valid_email');
+			$this->form_validation->set_rules('password', 'Password', 'required|bitauth_valid_password');
+			$this->form_validation->set_rules('password_conf', 'Password Confirmation', 'required|matches[password]');
+
+			if($this->form_validation->run() == TRUE)
+			{
+				unset($_POST['submit'], $_POST['password_conf']);
+				$this->bitauth->add_user($this->input->post());
+				redirect('auth/login');
+			}
 
-		} else {																// fail
-			$this->_show_message($this->lang->line('auth_message_activation_failed'));
 		}
+		$data['head'] = $this->assets;
+		$data['content'] = $this->load->view('example/add_user', array('title' => 'Register'),true);
+		$this->load->view('includes/index',$data);
 	}
 
 	/**
-	 * Generate reset code (to change password) and send it to user
-	 *
-	 * @return void
-	 */
-	function forgot_password()
+	* Example::add_user()
+	*
+	*/
+	public function add_user()
 	{
-		if ($this->tank_auth->is_logged_in()) {									// logged in
-			redirect('');
-
-		} elseif ($this->tank_auth->is_logged_in(FALSE)) {						// logged in, not activated
-			redirect('/auth/send_again/');
-
-		} else {
-			$this->form_validation->set_rules('login', 'Email or login', 'trim|required|xss_clean');
-
-			$data['errors'] = array();
-
-			if ($this->form_validation->run()) {								// validation ok
-				if (!is_null($data = $this->tank_auth->forgot_password(
-						$this->form_validation->set_value('login')))) {
-
-					$data['site_name'] = $this->config->item('website_name', 'tank_auth');
-
-					// Send email with password activation link
-					$this->_send_email('forgot_password', $data['email'], $data);
-
-					$this->_show_message($this->lang->line('auth_message_new_password_sent'));
-
-				} else {
-					$errors = $this->tank_auth->get_error_message();
-					foreach ($errors as $k => $v)	$data['errors'][$k] = $this->lang->line($v);
-				}
-			}
-			$this->load->view('auth/forgot_password_form', $data);
+		if( ! $this->bitauth->logged_in())
+		{
+			$this->session->set_userdata('redir', current_url());
+			redirect('auth/login');
 		}
-	}
-
-	/**
-	 * Replace user password (forgotten) with a new one (set by user).
-	 * User is verified by user_id and authentication code in the URL.
-	 * Can be called by clicking on link in mail.
-	 *
-	 * @return void
-	 */
-	function reset_password()
-	{
-		$user_id		= $this->uri->segment(3);
-		$new_pass_key	= $this->uri->segment(4);
-
-		$this->form_validation->set_rules('new_password', 'New Password', 'trim|required|xss_clean|min_length['.$this->config->item('password_min_length', 'tank_auth').']|max_length['.$this->config->item('password_max_length', 'tank_auth').']|alpha_dash');
-		$this->form_validation->set_rules('confirm_new_password', 'Confirm new Password', 'trim|required|xss_clean|matches[new_password]');
-
-		$data['errors'] = array();
 
-		if ($this->form_validation->run()) {								// validation ok
-			if (!is_null($data = $this->tank_auth->reset_password(
-					$user_id, $new_pass_key,
-					$this->form_validation->set_value('new_password')))) {	// success
-
-				$data['site_name'] = $this->config->item('website_name', 'tank_auth');
-
-				// Send email with new password
-				$this->_send_email('reset_password', $data['email'], $data);
-
-				$this->_show_message($this->lang->line('auth_message_new_password_activated').' '.anchor('/auth/login/', 'Login'));
+		if ( ! $this->bitauth->has_role('admin'))
+		{
+			$this->load->view('example/no_access');
+			return;
+		}
 
-			} else {														// fail
-				$this->_show_message($this->lang->line('auth_message_new_password_failed'));
-			}
-		} else {
-			// Try to activate user by password key (if not activated yet)
-			if ($this->config->item('email_activation', 'tank_auth')) {
-				$this->tank_auth->activate_user($user_id, $new_pass_key, FALSE);
+		if($this->input->post())
+		{
+			$this->form_validation->set_rules('username', 'Username', 'trim|required|bitauth_unique_username');
+			$this->form_validation->set_rules('fullname', 'Fullname', '');
+			$this->form_validation->set_rules('email', 'Email', 'trim|required|valid_email');
+			$this->form_validation->set_rules('password', 'Password', 'required|bitauth_valid_password');
+			$this->form_validation->set_rules('password_conf', 'Password Confirmation', 'required|matches[password]');
+
+			if($this->form_validation->run() == TRUE)
+			{
+				unset($_POST['submit'], $_POST['password_conf']);
+				$this->bitauth->add_user($this->input->post());
+				redirect('auth');
 			}
 
-			if (!$this->tank_auth->can_reset_password($user_id, $new_pass_key)) {
-				$this->_show_message($this->lang->line('auth_message_new_password_failed'));
-			}
 		}
-		$this->load->view('auth/reset_password_form', $data);
+		$data['head'] = $this->assets;
+		$data['content'] = $this->load->view('example/add_user', array('title' => 'Add User', 'bitauth' => $this->bitauth),true);
+		$this->load->view('includes/index',$data);
 	}
 
-	/**
-	 * Change user password
-	 *
-	 * @return void
-	 */
-	function change_password()
-	{
-		if (!$this->tank_auth->is_logged_in()) {								// not logged in or not activated
-			redirect('/auth/login/');
-
-		} else {
-			$this->form_validation->set_rules('old_password', 'Old Password', 'trim|required|xss_clean');
-			$this->form_validation->set_rules('new_password', 'New Password', 'trim|required|xss_clean|min_length['.$this->config->item('password_min_length', 'tank_auth').']|max_length['.$this->config->item('password_max_length', 'tank_auth').']|alpha_dash');
-			$this->form_validation->set_rules('confirm_new_password', 'Confirm new Password', 'trim|required|xss_clean|matches[new_password]');
-
-			$data['errors'] = array();
-
-			if ($this->form_validation->run()) {								// validation ok
-				if ($this->tank_auth->change_password(
-						$this->form_validation->set_value('old_password'),
-						$this->form_validation->set_value('new_password'))) {	// success
-					$this->_show_message($this->lang->line('auth_message_password_changed'));
-
-				} else {														// fail
-					$errors = $this->tank_auth->get_error_message();
-					foreach ($errors as $k => $v)	$data['errors'][$k] = $this->lang->line($v);
-				}
-			}
-			$this->load->view('auth/change_password_form', $data);
-		}
-	}
 
 	/**
-	 * Change user email
-	 *
-	 * @return void
-	 */
-	function change_email()
+	* Example::edit_user()
+	*
+	*/
+	public function edit_user($user_id)
 	{
-		if (!$this->tank_auth->is_logged_in()) {								// not logged in or not activated
-			redirect('/auth/login/');
-
-		} else {
-			$this->form_validation->set_rules('password', 'Password', 'trim|required|xss_clean');
-			$this->form_validation->set_rules('email', 'Email', 'trim|required|xss_clean|valid_email');
-
-			$data['errors'] = array();
+		if( ! $this->bitauth->logged_in())
+		{
+			$this->session->set_userdata('redir', current_url());
+			redirect('auth/login');
+		}
 
-			if ($this->form_validation->run()) {								// validation ok
-				if (!is_null($data = $this->tank_auth->set_new_email(
-						$this->form_validation->set_value('email'),
-						$this->form_validation->set_value('password')))) {			// success
+		if ( ! $this->bitauth->has_role('admin'))
+		{
+			$this->load->view('example/no_access');
+			return;
+		}
 
-					$data['site_name'] = $this->config->item('website_name', 'tank_auth');
+		if($this->input->post())
+		{
+			$this->form_validation->set_rules('username', 'Username', 'trim|required|bitauth_unique_username['.$user_id.']');
+			$this->form_validation->set_rules('fullname', 'Fullname', '');
+			$this->form_validation->set_rules('email', 'Email', 'trim|required|valid_email');
+			$this->form_validation->set_rules('active', 'Active', '');
+			$this->form_validation->set_rules('enabled', 'Enabled', '');
+			$this->form_validation->set_rules('password_never_expires', 'Password Never Expires', '');
+			$this->form_validation->set_rules('groups[]', 'Groups', '');
+
+			if($this->input->post('password'))
+			{
+				$this->form_validation->set_rules('password', 'Password', 'bitauth_valid_password');
+				$this->form_validation->set_rules('password_conf', 'Password Confirmation', 'required|matches[password]');
+			}
 
-					// Send email with new email address and its activation link
-					$this->_send_email('change_email', $data['new_email'], $data);
+			if($this->form_validation->run() == TRUE)
+			{
+				unset($_POST['submit'], $_POST['password_conf']);
+				$this->bitauth->update_user($user_id, $this->input->post());
+				redirect('auth');
+			}
 
-					$this->_show_message(sprintf($this->lang->line('auth_message_new_email_sent'), $data['new_email']));
+		}
 
-				} else {
-					$errors = $this->tank_auth->get_error_message();
-					foreach ($errors as $k => $v)	$data['errors'][$k] = $this->lang->line($v);
-				}
-			}
-			$this->load->view('auth/change_email_form', $data);
+		$groups = array();
+		foreach($this->bitauth->get_groups() as $_group)
+		{
+			$groups[$_group->group_id] = $_group->name;
 		}
+		$authData = array('bitauth' => $this->bitauth, 'groups' => $groups, 'user' => $this->bitauth->get_user_by_id($user_id));
+		$data['head'] = $this->assets;
+		$data['content'] = $this->load->view('example/edit_user',$authData,true);
+		$this->load->view('includes/index',$data);
 	}
 
 	/**
-	 * Replace user email with a new one.
-	 * User is verified by user_id and authentication code in the URL.
-	 * Can be called by clicking on link in mail.
+	 * Example::groups()
 	 *
-	 * @return void
 	 */
-	function reset_email()
+	public function groups()
 	{
-		$user_id		= $this->uri->segment(3);
-		$new_email_key	= $this->uri->segment(4);
-
-		// Reset email
-		if ($this->tank_auth->activate_new_email($user_id, $new_email_key)) {	// success
-			$this->tank_auth->logout();
-			$this->_show_message($this->lang->line('auth_message_new_email_activated').' '.anchor('/auth/login/', 'Login'));
-
-		} else {																// fail
-			$this->_show_message($this->lang->line('auth_message_new_email_failed'));
+		if( ! $this->bitauth->logged_in())
+		{
+			$this->session->set_userdata('redir', current_url());
+			redirect('auth/login');
 		}
+		$authData = array('bitauth' => $this->bitauth, 'groups' => $this->bitauth->get_groups());
+		$data['head'] = $this->assets;
+		$data['content'] = $this->load->view('example/groups', $authData,true);
+		$this->load->view('includes/index',$data);
 	}
 
 	/**
-	 * Delete user from the site (only when user is logged in)
+	 * Example::add_group()
 	 *
-	 * @return void
 	 */
-	function unregister()
+	public function add_group()
 	{
-		if (!$this->tank_auth->is_logged_in()) {								// not logged in or not activated
-			redirect('/auth/login/');
-
-		} else {
-			$this->form_validation->set_rules('password', 'Password', 'trim|required|xss_clean');
-
-			$data['errors'] = array();
+		if( ! $this->bitauth->logged_in())
+		{
+			$this->session->set_userdata('redir', current_url());
+			redirect('auth/login');
+		}
 
-			if ($this->form_validation->run()) {								// validation ok
-				if ($this->tank_auth->delete_user(
-						$this->form_validation->set_value('password'))) {		// success
-					$this->_show_message($this->lang->line('auth_message_unregistered'));
+		if ( ! $this->bitauth->has_role('admin'))
+		{
+			$this->load->view('example/no_access');
+			return;
+		}
 
-				} else {														// fail
-					$errors = $this->tank_auth->get_error_message();
-					foreach ($errors as $k => $v)	$data['errors'][$k] = $this->lang->line($v);
-				}
+		if($this->input->post())
+		{
+			$this->form_validation->set_rules('name', 'Group Name', 'trim|required|bitauth_unique_group');
+			$this->form_validation->set_rules('description', 'Description', '');
+			$this->form_validation->set_rules('members[]', 'Members', '');
+			$this->form_validation->set_rules('roles[]', 'Roles', '');
+
+			if($this->form_validation->run() == TRUE)
+			{
+				unset($_POST['submit']);
+				$this->bitauth->add_group($this->input->post());
+				redirect('auth/groups');
 			}
-			$this->load->view('auth/unregister_form', $data);
-		}
-	}
 
-	/**
-	 * Show info message
-	 *
-	 * @param	string
-	 * @return	void
-	 */
-	function _show_message($message)
-	{
-		$this->session->set_flashdata('message', $message);
-		redirect('/auth/');
-	}
+		}
 
-	/**
-	 * Send email message of given type (activate, forgot_password, etc.)
-	 *
-	 * @param	string
-	 * @param	string
-	 * @param	array
-	 * @return	void
-	 */
-	function _send_email($type, $email, &$data)
-	{
-		$this->load->library('email');
-		$this->email->from($this->config->item('webmaster_email', 'tank_auth'), $this->config->item('website_name', 'tank_auth'));
-		$this->email->reply_to($this->config->item('webmaster_email', 'tank_auth'), $this->config->item('website_name', 'tank_auth'));
-		$this->email->to($email);
-		$this->email->subject(sprintf($this->lang->line('auth_subject_'.$type), $this->config->item('website_name', 'tank_auth')));
-		$this->email->message($this->load->view('email/'.$type.'-html', $data, TRUE));
-		$this->email->set_alt_message($this->load->view('email/'.$type.'-txt', $data, TRUE));
-		$this->email->send();
+		$users = array();
+		foreach($this->bitauth->get_users() as $_user)
+		{
+			$users[$_user->user_id] = $_user->fullname;
+		}
+		$authData = array('bitauth' => $this->bitauth, 'roles' => $this->bitauth->get_roles(), 'users' => $users);
+		$data['head'] = $this->assets;
+		$data['content'] = $this->load->view('example/add_group', $authData,true);
+		$this->load->view('includes/index',$data);
 	}
 
 	/**
-	 * Create CAPTCHA image to verify user as a human
+	 * Example:edit_group()
 	 *
-	 * @return	string
 	 */
-	function _create_captcha()
+	public function edit_group($group_id)
 	{
-		$this->load->helper('captcha');
-
-		$cap = create_captcha(array(
-			'img_path'		=> './'.$this->config->item('captcha_path', 'tank_auth'),
-			'img_url'		=> base_url().$this->config->item('captcha_path', 'tank_auth'),
-			'font_path'		=> './'.$this->config->item('captcha_fonts_path', 'tank_auth'),
-			'font_size'		=> $this->config->item('captcha_font_size', 'tank_auth'),
-			'img_width'		=> $this->config->item('captcha_width', 'tank_auth'),
-			'img_height'	=> $this->config->item('captcha_height', 'tank_auth'),
-			'show_grid'		=> $this->config->item('captcha_grid', 'tank_auth'),
-			'expiration'	=> $this->config->item('captcha_expire', 'tank_auth'),
-		));
+		if( ! $this->bitauth->logged_in())
+		{
+			$this->session->set_userdata('redir', current_url());
+			redirect('auth/login');
+		}
 
-		// Save captcha params in session
-		$this->session->set_flashdata(array(
-				'captcha_word' => $cap['word'],
-				'captcha_time' => $cap['time'],
-		));
+		if ( ! $this->bitauth->has_role('admin'))
+		{
+			$this->load->view('example/no_access');
+			return;
+		}
 
-		return $cap['image'];
-	}
+		if($this->input->post())
+		{
+			$this->form_validation->set_rules('name', 'Group Name', 'trim|required|bitauth_unique_group['.$group_id.']');
+			$this->form_validation->set_rules('description', 'Description', '');
+			$this->form_validation->set_rules('members[]', 'Members', '');
+			$this->form_validation->set_rules('roles[]', 'Roles', '');
+
+			if($this->form_validation->run() == TRUE)
+			{
+				unset($_POST['submit']);
+				$this->bitauth->update_group($group_id, $this->input->post());
+				redirect('auth/groups');
+			}
 
-	/**
-	 * Callback function. Check if CAPTCHA test is passed.
-	 *
-	 * @param	string
-	 * @return	bool
-	 */
-	function _check_captcha($code)
-	{
-		$time = $this->session->flashdata('captcha_time');
-		$word = $this->session->flashdata('captcha_word');
+		}
 
-		list($usec, $sec) = explode(" ", microtime());
-		$now = ((float)$usec + (float)$sec);
+		$users = array();
+		foreach($this->bitauth->get_users() as $_user)
+		{
+			$users[$_user->user_id] = $_user->fullname;
+		}
 
-		if ($now - $time > $this->config->item('captcha_expire', 'tank_auth')) {
-			$this->form_validation->set_message('_check_captcha', $this->lang->line('auth_captcha_expired'));
-			return FALSE;
+		$group = $this->bitauth->get_group_by_id($group_id);
 
-		} elseif (($this->config->item('captcha_case_sensitive', 'tank_auth') AND
-				$code != $word) OR
-				strtolower($code) != strtolower($word)) {
-			$this->form_validation->set_message('_check_captcha', $this->lang->line('auth_incorrect_captcha'));
-			return FALSE;
+		$role_list = array();
+		$roles = $this->bitauth->get_roles();
+		foreach($roles as $_slug => $_desc)
+		{
+			if($this->bitauth->has_role($_slug, $group->roles))
+			{
+				$role_list[] = $_slug;
+			}
 		}
-		return TRUE;
+		$authData = array('bitauth' => $this->bitauth, 'roles' => $roles, 'group' => $group, 'group_roles' => $role_list, 'users' => $users);
+		$data['head'] = $this->assets;
+		$data['content'] = $this->load->view('example/edit_group', $authData,true);
+		$this->load->view('includes/index',$data);
 	}
 
 	/**
-	 * Create reCAPTCHA JS and non-JS HTML to verify user as a human
+	 * Example::activate()
 	 *
-	 * @return	string
 	 */
-	function _create_recaptcha()
-	{
-		$this->load->helper('recaptcha');
-
-		// Add custom theme so we can get only image
-		$options = "<script>var RecaptchaOptions = {theme: 'custom', custom_theme_widget: 'recaptcha_widget'};</script>\n";
-
-		// Get reCAPTCHA JS and non-JS HTML
-		$html = recaptcha_get_html($this->config->item('recaptcha_public_key', 'tank_auth'));
-
-		return $options.$html;
-	}
+	 public function activate($activation_code)
+	 {
+	 	if($this->bitauth->activate($activation_code))
+	 	{
+	 		$this->load->view('example/activation_successful');
+	 		return;
+	 	}
+		$authData = array();
+		$data['head'] = $this->assets;
+		$data['content'] = $this->load->view('example/activation_failed', $authData,true);
+		$this->load->view('includes/index',$data);
+	 }
 
 	/**
-	 * Callback function. Check if reCAPTCHA test is passed.
+	 * Example::logout()
 	 *
-	 * @return	bool
 	 */
-	function _check_recaptcha()
+	public function logout()
 	{
-		$this->load->helper('recaptcha');
-
-		$resp = recaptcha_check_answer($this->config->item('recaptcha_private_key', 'tank_auth'),
-				$_SERVER['REMOTE_ADDR'],
-				$_POST['recaptcha_challenge_field'],
-				$_POST['recaptcha_response_field']);
-
-		if (!$resp->is_valid) {
-			$this->form_validation->set_message('_check_recaptcha', $this->lang->line('auth_incorrect_captcha'));
-			return FALSE;
-		}
-		return TRUE;
+		$this->bitauth->logout();
+		redirect('auth');
 	}
-
 }
 
 /* End of file auth.php */
diff --git a/application/controllers/example.php b/application/controllers/example.php
deleted file mode 100755
index 7f318f8..0000000
--- a/application/controllers/example.php
+++ /dev/null
@@ -1,12 +0,0 @@
-<?php
-
-class Example extends CI_Controller {
-
-	
-	function index()
-	{
-		$this->load->view('example');
-	}
-}
-
-?>
\ No newline at end of file
diff --git a/application/controllers/welcome.php b/application/controllers/welcome.php
index 163d141..89283e8 100755
--- a/application/controllers/welcome.php
+++ b/application/controllers/welcome.php
@@ -5,34 +5,26 @@ class Welcome extends CI_Controller
 	function __construct()
 	{
 		parent::__construct();
-		if (!$this->tank_auth->is_logged_in()) {
+		if (!$this->bitauth->logged_in()) {
 			redirect('/auth/login/');
-		}
+			
+        }
+		$this->load->library('characters');
 	}
 
 	function index()
 	{
-		$this->assets->load('jquery-ui-1.8.5.custom.css','dark-hive');
-		$this->assets->load('test.css');
-		$this->assets->load('jquery.js');
-		$this->assets->load('jquery-ui-1.8.5.custom.min.js');
-		$this->assets->load('global.js');
-		$data['head'] = $this->assets->display_header_assets();
-		$data['user_id']	= $this->tank_auth->get_user_id();
-		$data['username']	= $this->tank_auth->get_username();
-		$query = $this->db->get_where('character',array('userID'=>$data['user_id']));
-		$data['characters'] = $query->result_array();
-		$query = $this->db->get_where('user_profiles',array('user_id'=>$data['user_id']));
-		$data['profile'] = $query->result_array();
-		$this->db->where_in('members',$data['user_id']);
-		$query = $this->db->get('group');
-		$data['groups'] = $query->result_array();
-		/*
-		$this->db->where_in('members',$data['user_id']);
-		$query = $this->db->get('chronical');
-		$data['chronicals'] = $query->result_array();
-		*/
-		$this->load->view('welcome', $data);
+		$this->assets['css'][]='vader/jquery-ui-1.8.5.custom.css';
+		$this->assets['css'][]='test.css';
+		$this->assets['js'][]='jquery.js';
+		$this->assets['js'][]='jquery-ui-1.8.5.custom.min.js';
+		//echo '<pre>'.htmlspecialchars(var_export($this->session->all_userdata(),true)).'</pre>';
+		$data['head'] = $this->assets;
+		$data['user_id']	= $this->session->userdata('ba_user_id');
+		$data['characters'] = $this->characters->getCharactersByUser($data['user_id']);
+		$data['profile'] = $this->session->all_userdata();
+		$data['content'] = 'welcome';
+		$this->load->view('includes/index', $data);
 	}
 }
 
diff --git a/application/helpers/couch_helper.php b/application/helpers/couch_helper.php
index 4e44e9b..eb06267 100644
--- a/application/helpers/couch_helper.php
+++ b/application/helpers/couch_helper.php
@@ -1,20 +1,18 @@
 <?php
-class couch_helper{
-	function merge_doc($object, $array){
-		foreach($array as $k=>$v){
-			$object->$k = $v;
-		}
-		return $object;
+function merge_doc($object, $array){
+	foreach($array as $k=>$v){
+		$object->$k = $v;
 	}
-	private function reduce($results){
-		if(counts($results['rows'])>0){
-			$list = array();
-			foreach($results['rows'] as $row){
-				$list[]=$row['value'];
-			}
-			return $list;
-		}else{
-			return false;
+	return $object;
+}
+function reduce($results){
+	if(count($results['rows'])>0){
+		$list = array();
+		foreach($results['rows'] as $row){
+			$list[]=$row['value'];
 		}
+		return $list;
+	}else{
+		return false;
 	}
 }
diff --git a/application/libraries/Tank_auth.php b/application/libraries/Tank_auth.php
index 716ee2e..f813b15 100755
--- a/application/libraries/Tank_auth.php
+++ b/application/libraries/Tank_auth.php
@@ -648,15 +648,16 @@ class Tank_auth
 		$profile->created = date('c');
 		$profile->last_updated = date('c');
 		$profile->type = 'profile';
-		$resp = $this->couchdb->storeDoc($profile);
+		$profile->group = array();
+		$resp = $this->ci->couchdb->storeDoc($profile);
 		return $resp;
 	}
 	private function deleteProfile($login){
-		$resp = $this->couchdb->deleteDoc($login);
+		$resp = $this->ci->couchdb->deleteDoc($login);
 		return $resp;
 	}
 	public function getProfile($login,$field = false){
-		$profile = $this->couchdb->getDoc($login);
+		$profile = $this->ci->couchdb->getDoc($login);
 		if($field){
 			return $profile->$field;
 		}else{
@@ -665,11 +666,11 @@ class Tank_auth
 		
 	}
 	public function setProfileData($login,$data){
-		$profile = $this->couchdb->getDoc($login);
+		$profile = $this->ci->couchdb->getDoc($login);
 		foreach($data as $k=>$v){
 			$profile->$k = $v;
 		}
-		$resp = $this->couchdb->storeDoc($profile);
+		$resp = $this->ci->couchdb->storeDoc($profile);
 		return $resp;
 	}
 }
diff --git a/application/libraries/characters.php b/application/libraries/characters.php
index 44984a6..12ac2c5 100644
--- a/application/libraries/characters.php
+++ b/application/libraries/characters.php
@@ -1,18 +1,21 @@
 <?php
 class Characters{
 	public function __construct(){
-		$this->couchdb->useDatabase('multiverse');
+		// Get CI instance
+		$this->ci =& get_instance();
+		
+		$this->ci->couchdb->useDatabase('multiverse');
 	}
 	public function newCharacter($data){
 		$char = new stdClass();
 		$doc = $this->couch_helper($char,$data);
-		$resp = $this->couchdb->storeDoc($doc);
+		$resp = $this->ci->couchdb->storeDoc($doc);
 		return $resp;
 	}
 	public function updateCharacter($data){
-		$char = $this->couchdb->getDoc($data->_id);
-		$doc = $this->couch_helper($char,$data);
-		$resp = $this->couchdb->storeDoc($doc);
+		$char = $this->ci->couchdb->getDoc($data->_id);
+		$doc = $this->ci->couch_helper($char,$data);
+		$resp = $this->ci->couchdb->storeDoc($doc);
 		return $resp;
 	}
 	public function deleteCharacter($data){
@@ -21,25 +24,25 @@ class Characters{
 		
 	}
 	public function getCharactersByUser($user){
-		$list = $this->couchdb->key($user)->asArray()->getView('character','user');
-		$list = $this->couch_helper->reduce($list);
+		$list = $this->ci->couchdb->key($user)->asArray()->getView('characters','user');
+		$list = reduce($list);
 		return $list;
 	}
 	public function getCharactersByGame($game){
-		$list = $this->couchdb->key($game)->asArray()->getView('character','game');
-		$list = $this->couch_helper->reduce($list);
+		$list = $this->ci->couchdb->key($game)->asArray()->getView('characters','game');
+		$list = reduce($list);
 		return $list;
 		
 	}
 	public function deleted(){
-		$list = $this->couchdb->asArray()->getView('character','delted');
-		$list = $this->couch_helper->reduce($list);
+		$list = $this->ci->couchdb->asArray()->getView('characters','delted');
+		$list = reduce($list);
 		return $list;
 		
 	}
 	public function publicCharacters(){
-		$list = $this->couchdb->asArray()->getView('character','public');
-		$list = $this->couch_helper->reduce($list);
+		$list = $this->ci->couchdb->asArray()->getView('characters','public');
+		$list = reduce($list);
 		return $list;
 	}
 }
diff --git a/application/views/character_form.php~ b/application/views/character_form.php~
deleted file mode 100755
index ac32e68..0000000
--- a/application/views/character_form.php~
+++ /dev/null
@@ -1,11 +0,0 @@
-<html>
-<?php $this->load->view('header');?>
-<body>
-    <div id="navbar" class="ui-widget-header nav-headbar"><?php $this->load->view('nav');?></div>
-<div id="container">
-<?=form_open('characters/new')?>
-	<?=form_hidden('userID',$userID)?>
-</div>
-    <div id="footer" class="ui-widget-header"><?php $this->load->view('foot');?></div>
-</body>
-</html>
\ No newline at end of file
diff --git a/application/views/includes/foot.php b/application/views/includes/foot.php
index 29366f9..8134542 100755
--- a/application/views/includes/foot.php
+++ b/application/views/includes/foot.php
@@ -1,2 +1,2 @@
-<div class="ui-widget-header">&copy 2011 Shawn Barratt</div>
+<footer class="ui-widget-header">&copy 2011 Shawn Barratt</footer>
 
diff --git a/application/views/includes/index.php b/application/views/includes/index.php
index 3fbc602..f5821fa 100755
--- a/application/views/includes/index.php
+++ b/application/views/includes/index.php
@@ -1,7 +1,11 @@
+<?php
+$nav = isset($nav)?$nav:'nav';
+?>
 <!doctype="html">
 <html>
 	<?php $this->load->view('includes/header');?>
 	<body>
+		<?php $this->load->view($nav);?>
 		<div id="content">
 			<?=$content?>
 		</div>
diff --git a/application/views/nav.php b/application/views/nav.php
index 634b04a..96c07e8 100755
--- a/application/views/nav.php
+++ b/application/views/nav.php
@@ -1,10 +1,11 @@
-<?php //require_once 'scripts/head.inc.php'; ?>
-<table style="width:100%">
-	<tr>
-		<td id="log-msg"></td>
-		<td><a href="#" id="about-link">about</a></td> 
-		<td><a href="#" id="faq-link">faq</a></td> 
-		<td><a href="#" id="wiki-link">wiki</a></td> 
-		<td><a href="logout.php" id="logout-link">logout</a></td>
-	</tr> 
-</table>
+
+<nav style="width:100%;" class="ui-widget-header nav-headbar">
+	<ul>
+		<li class="'.($current_url='welcome'?'ui-state-active':'ui-state-default').'"><?=anchor('welcome','Home')?></li>
+		<li class="'.($current_url='welcome'?'ui-state-active':'ui-state-default').'" id="log-msg">Log</li>
+		<li class="'.($current_url='welcome'?'ui-state-active':'ui-state-default').'"><a href="#" id="about-link">about</a></li> 
+		<li class="'.($current_url='welcome'?'ui-state-active':'ui-state-default').'"><a href="#" id="faq-link">faq</a></li> 
+		<li class="'.($current_url='welcome'?'ui-state-active':'ui-state-default').'"><a href="#" id="wiki-link">wiki</a></li> 
+		<li class="'.($current_url='welcome'?'ui-state-active':'ui-state-default').'"><a href="logout.php" id="logout-link">logout</a></li>
+	</ul> 
+</nav>
diff --git a/application/views/welcome.php b/application/views/welcome.php
index 1915409..d9de179 100755
--- a/application/views/welcome.php
+++ b/application/views/welcome.php
@@ -1,7 +1,7 @@
 <html>
 <?php $this->load->view('header');?>
 <body>
-    <div id="navbar" class="ui-widget-header nav-headbar"><?php $this->load->view('nav');?></div>
+    
 <div id="container">
 	<ul>
 		<li><a href="#profile">Profile</a></li>
diff --git a/assets/css/test.css b/assets/css/test.css
index 65f1163..028ebfe 100755
--- a/assets/css/test.css
+++ b/assets/css/test.css
@@ -6,32 +6,36 @@ body{
 	padding:0;
 }
 .container{
-	margin:none;
+	margin:0 auto;
 	padding:none;
-	width:100%;
-	height:100%;
+	width:95%;
+	height:95%;
 	position:absolute;
 	overflow:none;
 }
     
-.nav-headbar{
-	margin:none;
+nav.nav-headbar{
+	margin:0 auto;
 	padding:none;
-	width:100%;
+	width:600px;
+	min-height:30px;
+	box-shadow: 0 5px 5px -5px white;
+	
 }
-.nav-headbar a{
-	padding-left:10%;
-	text-decoration:none;
-}
-.nav-headbar a:visited{
-	color:white;
-	padding-left:10%;
-	text-decoration:none;
-}
-.nav-headbar a:hover{
-	padding-left:10%;
-	text-decoration:underline;
-	color:grey;
+nav.nav-headbar ul{
+	padding:0;
+	margin:0 auto;
+	list-style: none;
+}
+nav.nav-headbar li{
+	float:left;
+	border:1px black solid;
+	min-width:95px;
+	padding: 3px 0;
+}
+nav.nav-headbar a{
+	width:75px;
+	margin: 0 auto;
 }
 #display{
     left:10%;
diff --git a/captcha/1348015176.6255.jpg b/captcha/1348015176.6255.jpg
deleted file mode 100644
index 67090d08a1de973963adf9734b863780bd261a80..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 4332
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%0DlGG?9yO2*cURfpmgNiF
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
OmYEI<w^S-+>OTN5?;Y*{

-- 
1.7.10.4

